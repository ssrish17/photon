From d6be048922ab5edeeb0c2f629bc730f7e0b10a59 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <shreenidhi.shedi@broadcom.com>
Date: Fri, 18 Apr 2025 19:54:18 +0530
Subject: [PATCH] add file exists wrapper

Signed-off-by: Shreenidhi Shedi <shreenidhi.shedi@broadcom.com>
---
 lib/zip/zip.rb | 298 +++++++++++++++++++++++++------------------------
 1 file changed, 152 insertions(+), 146 deletions(-)

diff --git a/lib/zip/zip.rb b/lib/zip/zip.rb
index 0a25dfb..6582fc8 100644
--- a/lib/zip/zip.rb
+++ b/lib/zip/zip.rb
@@ -8,6 +8,12 @@ require 'zip/stdrubyext'
 require 'zip/ioextras'
 require 'zip/version'
 
+class File
+  def self.exists?(path)
+    self.exist?(path)
+  end
+end
+
 if Tempfile.superclass == SimpleDelegator
   require 'zip/tempfile_bugfixed'
   Tempfile = BugFix::Tempfile
@@ -26,53 +32,53 @@ module Zip
   RUNNING_ON_WINDOWS = /mswin32|cygwin|mingw|bccwin/ =~ RUBY_PLATFORM
 
   # Ruby 1.7.x compatibility
-  # In ruby 1.6.x and 1.8.0 reading from an empty stream returns 
+  # In ruby 1.6.x and 1.8.0 reading from an empty stream returns
   # an empty string the first time and then nil.
   #  not so in 1.7.x
   EMPTY_FILE_RETURNS_EMPTY_STRING_FIRST = RUBY_MINOR_VERSION != 7
 
-  # ZipInputStream is the basic class for reading zip entries in a 
-  # zip file. It is possible to create a ZipInputStream object directly, 
-  # passing the zip file name to the constructor, but more often than not 
-  # the ZipInputStream will be obtained from a ZipFile (perhaps using the 
-  # ZipFileSystem interface) object for a particular entry in the zip 
+  # ZipInputStream is the basic class for reading zip entries in a
+  # zip file. It is possible to create a ZipInputStream object directly,
+  # passing the zip file name to the constructor, but more often than not
+  # the ZipInputStream will be obtained from a ZipFile (perhaps using the
+  # ZipFileSystem interface) object for a particular entry in the zip
   # archive.
   #
   # A ZipInputStream inherits IOExtras::AbstractInputStream in order
-  # to provide an IO-like interface for reading from a single zip 
-  # entry. Beyond methods for mimicking an IO-object it contains 
-  # the method get_next_entry for iterating through the entries of 
+  # to provide an IO-like interface for reading from a single zip
+  # entry. Beyond methods for mimicking an IO-object it contains
+  # the method get_next_entry for iterating through the entries of
   # an archive. get_next_entry returns a ZipEntry object that describes
   # the zip entry the ZipInputStream is currently reading from.
   #
-  # Example that creates a zip archive with ZipOutputStream and reads it 
+  # Example that creates a zip archive with ZipOutputStream and reads it
   # back again with a ZipInputStream.
   #
   #   require 'zip/zip'
-  #   
-  #   Zip::ZipOutputStream::open("my.zip") { 
+  #
+  #   Zip::ZipOutputStream::open("my.zip") {
   #     |io|
-  #   
+  #
   #     io.put_next_entry("first_entry.txt")
   #     io.write "Hello world!"
-  #   
+  #
   #     io.put_next_entry("adir/first_entry.txt")
   #     io.write "Hello again!"
   #   }
   #
-  #   
+  #
   #   Zip::ZipInputStream::open("my.zip") {
   #     |io|
-  #   
+  #
   #     while (entry = io.get_next_entry)
   #       puts "Contents of #{entry.name}: '#{io.read}'"
   #     end
   #   }
   #
-  # java.util.zip.ZipInputStream is the original inspiration for this 
+  # java.util.zip.ZipInputStream is the original inspiration for this
   # class.
 
-  class ZipInputStream 
+  class ZipInputStream
     include IOExtras::AbstractInputStream
 
     # Opens the indicated zip file. An exception is thrown
@@ -86,17 +92,17 @@ module Zip
       @decompressor = NullDecompressor.instance
       @currentEntry = nil
     end
-    
+
     def close
       @archiveIO.close
     end
 
     # Same as #initialize but if a block is passed the opened
     # stream is passed to the block and closed when the block
-    # returns.    
+    # returns.
     def ZipInputStream.open(filename)
       return new(filename) unless block_given?
-      
+
       zio = new(filename)
       yield zio
     ensure
@@ -104,12 +110,12 @@ module Zip
     end
 
     # Returns a ZipEntry object. It is necessary to call this
-    # method on a newly created ZipInputStream before reading from 
-    # the first entry in the archive. Returns nil when there are 
+    # method on a newly created ZipInputStream before reading from
+    # the first entry in the archive. Returns nil when there are
     # no more entries.
 
     def get_next_entry
-      @archiveIO.seek(@currentEntry.next_header_offset, 
+      @archiveIO.seek(@currentEntry.next_header_offset,
                       IO::SEEK_SET) if @currentEntry
       open_entry
     end
@@ -118,7 +124,7 @@ module Zip
     def rewind
       return if @currentEntry.nil?
       @lineno = 0
-      @archiveIO.seek(@currentEntry.localHeaderOffset, 
+      @archiveIO.seek(@currentEntry.localHeaderOffset,
 		      IO::SEEK_SET)
       open_entry
     end
@@ -137,10 +143,10 @@ module Zip
 
     def open_entry
       @currentEntry = ZipEntry.read_local_entry(@archiveIO)
-      if (@currentEntry == nil) 
+      if (@currentEntry == nil)
 	@decompressor = NullDecompressor.instance
       elsif @currentEntry.compression_method == ZipEntry::STORED
-	@decompressor = PassThruDecompressor.new(@archiveIO, 
+	@decompressor = PassThruDecompressor.new(@archiveIO,
 						 @currentEntry.size)
       elsif @currentEntry.compression_method == ZipEntry::DEFLATED
 	@decompressor = Inflater.new(@archiveIO)
@@ -160,9 +166,9 @@ module Zip
       @decompressor.input_finished?
     end
   end
-  
-  
-  
+
+
+
   class Decompressor  #:nodoc:all
     CHUNK_SIZE=32768
     def initialize(inputStream)
@@ -170,7 +176,7 @@ module Zip
       @inputStream=inputStream
     end
   end
-  
+
   class Inflater < Decompressor  #:nodoc:all
     def initialize(inputStream)
       super
@@ -178,7 +184,7 @@ module Zip
       @outputBuffer=""
       @hasReturnedEmptyString = ! EMPTY_FILE_RETURNS_EMPTY_STRING_FIRST
     end
-    
+
     def sysread(numberOfBytes = nil, buf = nil)
       readEverything = (numberOfBytes == nil)
       while (readEverything || @outputBuffer.length < numberOfBytes)
@@ -189,7 +195,7 @@ module Zip
       endIndex= numberOfBytes==nil ? @outputBuffer.length : numberOfBytes
       return @outputBuffer.slice!(0...endIndex)
     end
-    
+
     def produce_input
       if (@outputBuffer.empty?)
 	return internal_produce_input
@@ -231,7 +237,7 @@ module Zip
       return ""
     end
   end
-  
+
   class PassThruDecompressor < Decompressor  #:nodoc:all
     def initialize(inputStream, charsToRead)
       super inputStream
@@ -239,7 +245,7 @@ module Zip
       @readSoFar = 0
       @hasReturnedEmptyString = ! EMPTY_FILE_RETURNS_EMPTY_STRING_FIRST
     end
-    
+
     # TODO: Specialize to handle different behaviour in ruby > 1.7.0 ?
     def sysread(numberOfBytes = nil, buf = nil)
       if input_finished?
@@ -248,7 +254,7 @@ module Zip
 	return "" unless hasReturnedEmptyStringVal
 	return nil
       end
-      
+
       if (numberOfBytes == nil || @readSoFar+numberOfBytes > @charsToRead)
 	numberOfBytes = @charsToRead-@readSoFar
       end
@@ -259,28 +265,28 @@ module Zip
         @inputStream.read(numberOfBytes)
       end
     end
-    
+
     def produce_input
       sysread(Decompressor::CHUNK_SIZE)
     end
-    
+
     def input_finished?
       (@readSoFar >= @charsToRead)
     end
     alias :eof :input_finished?
     alias :eof? :input_finished?
   end
-  
+
   class NullDecompressor  #:nodoc:all
     include Singleton
     def sysread(numberOfBytes = nil, buf = nil)
       nil
     end
-    
+
     def produce_input
       nil
     end
-    
+
     def input_finished?
       true
     end
@@ -290,11 +296,11 @@ module Zip
     end
     alias :eof? :eof
   end
-  
+
   class NullInputStream < NullDecompressor  #:nodoc:all
     include IOExtras::AbstractInputStream
   end
-  
+
   class ZipEntry
     STORED = 0
     DEFLATED = 8
@@ -307,7 +313,7 @@ module Zip
     FSTYPE_ATARI = 5
     FSTYPE_HPFS = 6
     FSTYPE_MAC = 7
-    FSTYPE_Z_SYSTEM = 8 
+    FSTYPE_Z_SYSTEM = 8
     FSTYPE_CPM = 9
     FSTYPE_TOPS20 = 10
     FSTYPE_NTFS = 11
@@ -344,8 +350,8 @@ module Zip
       FSTYPE_MAC_OSX => 'Mac OS/X (Darwin)'.freeze,
       FSTYPE_ATHEOS => 'AtheOS'.freeze,
     }.freeze
-    
-    attr_accessor  :comment, :compressed_size, :crc, :extra, :compression_method, 
+
+    attr_accessor  :comment, :compressed_size, :crc, :extra, :compression_method,
       :name, :size, :localHeaderOffset, :zipfile, :fstype, :externalFileAttributes, :gp_flags, :header_signature
 
     attr_accessor :follow_symlinks
@@ -353,14 +359,14 @@ module Zip
     attr_accessor :unix_uid, :unix_gid, :unix_perms
 
     attr_reader :ftype, :filepath # :nodoc:
-    
-    def initialize(zipfile = "", name = "", comment = "", extra = "", 
-                   compressed_size = 0, crc = 0, 
+
+    def initialize(zipfile = "", name = "", comment = "", extra = "",
+                   compressed_size = 0, crc = 0,
 		   compression_method = ZipEntry::DEFLATED, size = 0,
 		   time  = Time.now)
       super()
       if name.starts_with("/")
-	raise ZipEntryNameError, "Illegal ZipEntry name '#{name}', name must not start with /" 
+	raise ZipEntryNameError, "Illegal ZipEntry name '#{name}', name must not start with /"
       end
       @localHeaderOffset = 0
       @internalFileAttributes = 1
@@ -373,8 +379,8 @@ module Zip
       else
         @fstype = FSTYPE_UNIX
       end
-      @zipfile, @comment, @compressed_size, @crc, @extra, @compression_method, 
-	@name, @size = zipfile, comment, compressed_size, crc, 
+      @zipfile, @comment, @compressed_size, @crc, @extra, @compression_method,
+	@name, @size = zipfile, comment, compressed_size, crc,
 	extra, compression_method, name, size
       @time = time
 
@@ -412,7 +418,7 @@ module Zip
       end
     end
     alias :mtime :time
-    
+
     def time=(aTime)
       unless @extra.member?("UniversalTime")
         @extra.create("UniversalTime")
@@ -447,16 +453,16 @@ module Zip
     def local_entry_offset  #:nodoc:all
       localHeaderOffset + local_header_size
     end
-    
+
     def local_header_size  #:nodoc:all
       LOCAL_ENTRY_STATIC_HEADER_LENGTH + (@name ?  @name.size : 0) + (@extra ? @extra.local_size : 0)
     end
 
     def cdir_header_size  #:nodoc:all
-      CDIR_ENTRY_STATIC_HEADER_LENGTH  + (@name ?  @name.size : 0) + 
+      CDIR_ENTRY_STATIC_HEADER_LENGTH  + (@name ?  @name.size : 0) +
 	(@extra ? @extra.c_dir_size : 0) + (@comment ? @comment.size : 0)
     end
-    
+
     def next_header_offset  #:nodoc:all
       local_entry_offset + self.compressed_size
     end
@@ -468,7 +474,7 @@ module Zip
       if directory?
 	create_directory(destPath, &onExistsProc)
       elsif file?
-	write_file(destPath, &onExistsProc) 
+	write_file(destPath, &onExistsProc)
       elsif symlink?
         create_symlink(destPath, &onExistsProc)
       else
@@ -481,29 +487,29 @@ module Zip
     def to_s
       @name
     end
-    
+
     protected
-    
+
     def ZipEntry.read_zip_short(io) # :nodoc:
       io.read(2).unpack('v')[0]
     end
-    
+
     def ZipEntry.read_zip_long(io) # :nodoc:
       io.read(4).unpack('V')[0]
     end
     public
-    
+
     LOCAL_ENTRY_SIGNATURE = 0x04034b50
     LOCAL_ENTRY_STATIC_HEADER_LENGTH = 30
     LOCAL_ENTRY_TRAILING_DESCRIPTOR_LENGTH = 4+4+4
-    
+
     def read_local_entry(io)  #:nodoc:all
       @localHeaderOffset = io.tell
       staticSizedFieldsBuf = io.read(LOCAL_ENTRY_STATIC_HEADER_LENGTH)
       unless (staticSizedFieldsBuf.size==LOCAL_ENTRY_STATIC_HEADER_LENGTH)
 	raise ZipError, "Premature end of file. Not enough data for zip entry local header"
       end
-      
+
       @header_signature       ,
         @version          ,
 	@fstype           ,
@@ -515,13 +521,13 @@ module Zip
 	@compressed_size   ,
 	@size             ,
 	nameLength        ,
-	extraLength       = staticSizedFieldsBuf.unpack('VCCvvvvVVVvv') 
+	extraLength       = staticSizedFieldsBuf.unpack('VCCvvvvVVVvv')
 
       unless (@header_signature == LOCAL_ENTRY_SIGNATURE)
 	raise ZipError, "Zip local header magic not found at location '#{localHeaderOffset}'"
       end
       set_time(lastModDate, lastModTime)
-      
+
       @name              = io.read(nameLength)
       extra              = io.read(extraLength)
 
@@ -535,7 +541,7 @@ module Zip
         end
       end
     end
-    
+
     def ZipEntry.read_local_entry(io)
       entry = new(io.path)
       entry.read_local_entry(io)
@@ -543,11 +549,11 @@ module Zip
     rescue ZipError
       return nil
     end
-  
+
     def write_local_entry(io)   #:nodoc:all
       @localHeaderOffset = io.tell
-      
-      io << 
+
+      io <<
 	[LOCAL_ENTRY_SIGNATURE    ,
 	0                  ,
 	0                         , # @gp_flags                  ,
@@ -562,10 +568,10 @@ module Zip
       io << @name
       io << (@extra ? @extra.to_local_bin : "")
     end
-    
+
     CENTRAL_DIRECTORY_ENTRY_SIGNATURE = 0x02014b50
     CDIR_ENTRY_STATIC_HEADER_LENGTH = 46
-    
+
     def read_c_dir_entry(io)  #:nodoc:all
       staticSizedFieldsBuf = io.read(CDIR_ENTRY_STATIC_HEADER_LENGTH)
       unless (staticSizedFieldsBuf.size == CDIR_ENTRY_STATIC_HEADER_LENGTH)
@@ -598,7 +604,7 @@ module Zip
 	raise ZipError, "Zip local header magic not found at location '#{localHeaderOffset}'"
       end
       set_time(lastModDate, lastModTime)
-      
+
       @name                  = io.read(nameLength)
       if ZipExtraField === @extra
         @extra.merge(io.read(extraLength))
@@ -632,7 +638,7 @@ module Zip
         end
       end
     end
-    
+
     def ZipEntry.read_c_dir_entry(io)  #:nodoc:all
       entry = new(io.path)
       entry.read_c_dir_entry(io)
@@ -694,7 +700,7 @@ module Zip
         @externalFileAttributes = (ft << 12 | (@unix_perms & 07777)) << 16
       end
 
-      io << 
+      io <<
 	[CENTRAL_DIRECTORY_ENTRY_SIGNATURE,
         @version                          , # version of encoding software
 	@fstype                           , # filesystem type
@@ -721,7 +727,7 @@ module Zip
       io << (@extra ? @extra.to_c_dir_bin : "")
       io << @comment
     end
-    
+
     def == (other)
       return false unless other.class == self.class
       # Compares contents of local entry and exposed fields
@@ -808,7 +814,7 @@ module Zip
         aZipOutputStream.put_next_entry(self)
       elsif @filepath
         aZipOutputStream.put_next_entry(self)
-        get_input_stream { |is| IOExtras.copy_stream(aZipOutputStream, is) } 
+        get_input_stream { |is| IOExtras.copy_stream(aZipOutputStream, is) }
       else
         aZipOutputStream.copy_raw_entry(self)
       end
@@ -848,7 +854,7 @@ module Zip
         end
       end
     end
-    
+
     def create_directory(destPath)
       if File.directory? destPath
         return
@@ -897,22 +903,22 @@ module Zip
   end
 
 
-  # ZipOutputStream is the basic class for writing zip files. It is 
-  # possible to create a ZipOutputStream object directly, passing 
-  # the zip file name to the constructor, but more often than not 
-  # the ZipOutputStream will be obtained from a ZipFile (perhaps using the 
-  # ZipFileSystem interface) object for a particular entry in the zip 
+  # ZipOutputStream is the basic class for writing zip files. It is
+  # possible to create a ZipOutputStream object directly, passing
+  # the zip file name to the constructor, but more often than not
+  # the ZipOutputStream will be obtained from a ZipFile (perhaps using the
+  # ZipFileSystem interface) object for a particular entry in the zip
   # archive.
   #
-  # A ZipOutputStream inherits IOExtras::AbstractOutputStream in order 
-  # to provide an IO-like interface for writing to a single zip 
-  # entry. Beyond methods for mimicking an IO-object it contains 
-  # the method put_next_entry that closes the current entry 
+  # A ZipOutputStream inherits IOExtras::AbstractOutputStream in order
+  # to provide an IO-like interface for writing to a single zip
+  # entry. Beyond methods for mimicking an IO-object it contains
+  # the method put_next_entry that closes the current entry
   # and creates a new.
   #
   # Please refer to ZipInputStream for example code.
   #
-  # java.util.zip.ZipOutputStream is the original inspiration for this 
+  # java.util.zip.ZipOutputStream is the original inspiration for this
   # class.
 
   class ZipOutputStream
@@ -935,7 +941,7 @@ module Zip
 
     # Same as #initialize but if a block is passed the opened
     # stream is passed to the block and closed when the block
-    # returns.    
+    # returns.
     def ZipOutputStream.open(fileName)
       return new(fileName) unless block_given?
       zos = new(fileName)
@@ -972,8 +978,8 @@ module Zip
       src_pos = entry.local_entry_offset
       entry.write_local_entry(@outputStream)
       @compressor = NullCompressor.instance
-      @outputStream << entry.get_raw_input_stream { 
-	|is| 
+      @outputStream << entry.get_raw_input_stream {
+	|is|
 	is.seek(src_pos, IO::SEEK_SET)
 	is.read(entry.compressed_size)
       }
@@ -985,14 +991,14 @@ module Zip
     def finalize_current_entry
       return unless @currentEntry
       finish
-      @currentEntry.compressed_size = @outputStream.tell - @currentEntry.localHeaderOffset - 
+      @currentEntry.compressed_size = @outputStream.tell - @currentEntry.localHeaderOffset -
 	@currentEntry.local_header_size
       @currentEntry.size = @compressor.size
       @currentEntry.crc = @compressor.crc
       @currentEntry = nil
       @compressor = NullCompressor.instance
     end
-    
+
     def init_next_entry(entry, level = Zlib::DEFAULT_COMPRESSION)
       finalize_current_entry
       @entrySet << entry
@@ -1004,7 +1010,7 @@ module Zip
       case entry.compression_method
 	when ZipEntry::DEFLATED then Deflater.new(@outputStream, level)
 	when ZipEntry::STORED   then PassThruCompressor.new(@outputStream)
-      else raise ZipCompressionMethodError, 
+      else raise ZipCompressionMethodError,
 	  "Invalid compression method: '#{entry.compression_method}'"
       end
     end
@@ -1036,13 +1042,13 @@ module Zip
       @compressor << data
     end
   end
-  
-  
+
+
   class Compressor #:nodoc:all
     def finish
     end
   end
-  
+
   class PassThruCompressor < Compressor #:nodoc:all
     def initialize(outputStream)
       super()
@@ -1050,7 +1056,7 @@ module Zip
       @crc = Zlib::crc32
       @size = 0
     end
-    
+
     def << (data)
       val = data.to_s
       @crc = Zlib::crc32(val, @crc)
@@ -1079,7 +1085,7 @@ module Zip
       @size = 0
       @crc = Zlib::crc32
     end
-    
+
     def << (data)
       val = data.to_s
       @crc = Zlib::crc32(val, @crc)
@@ -1095,11 +1101,11 @@ module Zip
 
     attr_reader :size, :crc
   end
-  
+
 
   class ZipEntrySet #:nodoc:all
     include Enumerable
-    
+
     def initialize(anEnumerable = [])
       super()
       @entrySet = {}
@@ -1139,7 +1145,7 @@ module Zip
 
     def == (other)
       return false unless other.kind_of?(ZipEntrySet)
-      return @entrySet == other.entrySet      
+      return @entrySet == other.entrySet
     end
 
     def parent(entry)
@@ -1147,11 +1153,11 @@ module Zip
     end
 
     def glob(pattern, flags = File::FNM_PATHNAME|File::FNM_DOTMATCH)
-      entries.select { 
-	|entry| 
-	File.fnmatch(pattern, entry.name.chomp('/'), flags) 
-      } 
-    end	
+      entries.select {
+	|entry|
+	File.fnmatch(pattern, entry.name.chomp('/'), flags)
+      }
+    end
 
 #TODO    attr_accessor :auto_create_directories
     protected
@@ -1161,7 +1167,7 @@ module Zip
 
   class ZipCentralDirectory
     include Enumerable
-    
+
     END_OF_CENTRAL_DIRECTORY_SIGNATURE = 0x06054b50
     MAX_END_OF_CENTRAL_DIRECTORY_STRUCTURE_SIZE = 65536 + 18
     STATIC_EOCD_SIZE = 22
@@ -1217,7 +1223,7 @@ module Zip
       @comment                              = buf.read(commentLength)
       raise ZipError, "Zip consistency problem while reading eocd structure" unless buf.size == 0
     end
-    
+
     def read_central_directory_entries(io)  #:nodoc:
       begin
 	io.seek(@cdirOffset, IO::SEEK_SET)
@@ -1229,12 +1235,12 @@ module Zip
 	@entrySet << ZipEntry.read_c_dir_entry(io)
       }
     end
-    
+
     def read_from_stream(io)  #:nodoc:
       read_e_o_c_d(io)
       read_central_directory_entries(io)
     end
-    
+
     def get_e_o_c_d(io)  #:nodoc:
       begin
 	io.seek(-MAX_END_OF_CENTRAL_DIRECTORY_STRUCTURE_SIZE, IO::SEEK_END)
@@ -1243,7 +1249,7 @@ module Zip
       rescue Errno::EFBIG # FreeBSD 4.9 raise Errno::EFBIG instead of Errno::EINVAL
 	io.seek(0, IO::SEEK_SET)
       end
-      
+
       # 'buf = io.read' substituted with lump of code to work around FreeBSD 4.5 issue
       retried = false
       buf = nil
@@ -1252,7 +1258,7 @@ module Zip
       rescue Errno::EFBIG # FreeBSD 4.5 may raise Errno::EFBIG
         raise if (retried)
         retried = true
-	
+
         io.seek(0, IO::SEEK_SET)
         retry
       end
@@ -1271,7 +1277,7 @@ module Zip
       @entrySet.each(&proc)
     end
 
-    # Returns the number of entries in the central directory (and 
+    # Returns the number of entries in the central directory (and
     # consequently in the zip archive).
     def size
       @entrySet.size
@@ -1290,8 +1296,8 @@ module Zip
       @entrySet.entries.sort == other.entries.sort && comment == other.comment
     end
   end
-  
-  
+
+
   class ZipError < StandardError ; end
 
   class ZipEntryExistsError            < ZipError; end
@@ -1311,17 +1317,17 @@ module Zip
   # the archive.
   #
   # Modifications to a zip archive are not committed until #commit or
-  # #close is called. The method #open accepts a block following 
-  # the pattern from File.open offering a simple way to 
-  # automatically close the archive when the block returns. 
+  # #close is called. The method #open accepts a block following
+  # the pattern from File.open offering a simple way to
+  # automatically close the archive when the block returns.
   #
-  # The following example opens zip archive <code>my.zip</code> 
-  # (creating it if it doesn't exist) and adds an entry 
-  # <code>first.txt</code> and a directory entry <code>a_dir</code> 
+  # The following example opens zip archive <code>my.zip</code>
+  # (creating it if it doesn't exist) and adds an entry
+  # <code>first.txt</code> and a directory entry <code>a_dir</code>
   # to it.
   #
   #   require 'zip/zip'
-  #   
+  #
   #   Zip::ZipFile.open("my.zip", Zip::ZipFile::CREATE) {
   #    |zipfile|
   #     zipfile.get_output_stream("first.txt") { |f| f.puts "Hello from ZipFile" }
@@ -1329,20 +1335,20 @@ module Zip
   #   }
   #
   # The next example reopens <code>my.zip</code> writes the contents of
-  # <code>first.txt</code> to standard out and deletes the entry from 
+  # <code>first.txt</code> to standard out and deletes the entry from
   # the archive.
   #
   #   require 'zip/zip'
-  #   
+  #
   #   Zip::ZipFile.open("my.zip", Zip::ZipFile::CREATE) {
   #     |zipfile|
   #     puts zipfile.read("first.txt")
   #     zipfile.remove("first.txt")
   #   }
   #
-  # ZipFileSystem offers an alternative API that emulates ruby's 
+  # ZipFileSystem offers an alternative API that emulates ruby's
   # interface for accessing the filesystem, ie. the File and Dir classes.
-  
+
   class ZipFile < ZipCentralDirectory
 
     CREATE = 1
@@ -1400,7 +1406,7 @@ module Zip
     # than using a ZipInputStream since this methods simply iterates
     # through the entries in the central directory structure in the archive
     # whereas ZipInputStream jumps through the entire archive accessing the
-    # local entry headers (which contain the same information as the 
+    # local entry headers (which contain the same information as the
     # central directory).
     def ZipFile.foreach(aZipFileName, &block)
       ZipFile.open(aZipFileName) {
@@ -1408,7 +1414,7 @@ module Zip
 	zipFile.each(&block)
       }
     end
-    
+
     # Returns an input stream to the specified entry. If a block is passed
     # the stream object is passed to the block and the stream is automatically
     # closed afterwards just as with ruby's builtin File.open method.
@@ -1427,7 +1433,7 @@ module Zip
       end
       zipStreamableEntry = ZipStreamableStream.new(newEntry)
       @entrySet << zipStreamableEntry
-      zipStreamableEntry.get_output_stream(&aProc)      
+      zipStreamableEntry.get_output_stream(&aProc)
     end
 
     # Returns the name of the zip archive
@@ -1437,7 +1443,7 @@ module Zip
 
     # Returns a string containing the contents of the specified entry
     def read(entry)
-      get_input_stream(entry) { |is| is.read } 
+      get_input_stream(entry) { |is| is.read }
     end
 
     # Convenience method for adding the contents of a file to the archive
@@ -1448,21 +1454,21 @@ module Zip
       newEntry.gather_fileinfo_from_srcpath(srcPath)
       @entrySet << newEntry
     end
-    
+
     # Removes the specified entry.
     def remove(entry)
       @entrySet.delete(get_entry(entry))
     end
-    
+
     # Renames the specified entry.
     def rename(entry, newName, &continueOnExistsProc)
       foundEntry = get_entry(entry)
       check_entry_exists(newName, continueOnExistsProc, "rename")
-      get_output_stream(newName) { |os| os.write(read(foundEntry)) }                  
+      get_output_stream(newName) { |os| os.write(read(foundEntry)) }
       remove(foundEntry)
     end
 
-    # Replaces the specified entry with the contents of srcPath (from 
+    # Replaces the specified entry with the contents of srcPath (from
     # the file system).
     def replace(entry, srcPath)
       check_file(srcPath)
@@ -1476,7 +1482,7 @@ module Zip
       foundEntry.extract(destPath, &onExistsProc)
     end
 
-    # Commits changes that has been made since the previous commit to 
+    # Commits changes that has been made since the previous commit to
     # the zip archive.
     def commit
      return if ! commit_required?
@@ -1504,11 +1510,11 @@ module Zip
       return @entrySet != @storedEntries || @create == ZipFile::CREATE
     end
 
-    # Searches for entry with the specified name. Returns nil if 
+    # Searches for entry with the specified name. Returns nil if
     # no entry is found. See also get_entry
     def find_entry(entry)
-      @entrySet.detect { 
-	|e| 
+      @entrySet.detect {
+	|e|
 	e.name.sub(/\/$/, "") == entry.to_s.sub(/\/$/, "")
       }
     end
@@ -1555,7 +1561,7 @@ module Zip
 	if continueOnExistsProc.call
 	  remove get_entry(entryName)
 	else
-	  raise ZipEntryExistsError, 
+	  raise ZipEntryExistsError,
 	    procedureName+" failed. Entry #{entryName} already exists"
 	end
       end
@@ -1566,7 +1572,7 @@ module Zip
 	raise Errno::ENOENT, path
       end
     end
-    
+
     def on_success_replace(aFilename)
       tmpfile = get_tempfile
       tmpFilename = tmpfile.path
@@ -1575,13 +1581,13 @@ module Zip
         FileUtils.mv(tmpFilename, name)
       end
     end
-    
+
     def get_tempfile
       tempFile = Tempfile.new(File.basename(name), File.dirname(name))
       tempFile.binmode
       tempFile
     end
-    
+
   end
 
   class ZipStreamableDirectory < ZipEntry
@@ -1629,10 +1635,10 @@ module Zip
         @tempFile
       end
     end
-    
+
     def write_to_zip_output_stream(aZipOutputStream)
       aZipOutputStream.put_next_entry(self)
-      get_input_stream { |is| IOExtras.copy_stream(aZipOutputStream, is) } 
+      get_input_stream { |is| IOExtras.copy_stream(aZipOutputStream, is) }
     end
   end
 
@@ -1770,10 +1776,10 @@ module Zip
 
     def merge(binstr)
       binstr == "" and return
-      i = 0 
+      i = 0
       while i < binstr.length
         id = binstr[i,2]
-        len = binstr[i+2,2].to_s.unpack("v")[0] 
+        len = binstr[i+2,2].to_s.unpack("v")[0]
         if id && ID_MAP.member?(id)
           field_name = ID_MAP[id].name
           if self.member?(field_name)
-- 
2.43.0

