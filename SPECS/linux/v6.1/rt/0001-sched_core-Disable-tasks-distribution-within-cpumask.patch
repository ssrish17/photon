From 84a249ea40e600f62dccaf0dd648851611fdeb88 Mon Sep 17 00:00:00 2001
From: Ankit Jain <ankitja@vmware.com>
Date: Tue, 18 Jul 2023 12:05:29 +0000
Subject: [PATCH] sched_core: Disable tasks distribution within cpumask

- Adding kernel cmdline param support to
  disable tasks distribution within cpumask
  feature
- kernel cmdline param 'sched_pick_firstcpu'
- Tasks distribution within cpumask is enabled
  by-default
- Note: Since, cpumask_any_and() calls cpumask_first_and()
  so, from https://github.com/torvalds/linux/commit/14e292f8d45380c519a83d9b0f37089a17eedcdf
  {rt/deadline}.c didn't changed back to cpumask_first_and()

Why this is being added?
- Upstream linux kernel v6.1 introduced new feature to distribute tasks within cpumask:
 - https://github.com/torvalds/linux/commit/46a87b3851f0d6eb05e6d83d5c5a30df0eca8f76
 - https://github.com/torvalds/linux/commit/14e292f8d45380c519a83d9b0f37089a17eedcdf
- In telco deployments, where there is high priority
  RT tasks executes on isolcpu and in isolcpu
  load balancing is disabled.
  So tasks can't be migrated of its own.
- container exec triggers interface called "runc init"
  whenever any new task runs in that container
- When we exec to a given container which is running
  on isolcpu and already executing high priority RT task,
  this may schedule "runc init" on any cpu within the given
  cpumask and if it is on isolcpu in which RT task is running
  then it may starve because RT throttling is also disabled
  in telco setup.Thus, causes exec failure.
- Few telco vendors, doesn't run any high prio RT tasks
  on fisrt cpu within the cpumask
- So, this kernel cmdline param give option to disable
  tasks distriution feature and schedule "runc init"
  on fisrt cpu within the given mask.

Signed-off-by: Ankit Jain <ankitja@vmware.com>
---
 lib/cpumask.c | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/lib/cpumask.c b/lib/cpumask.c
index c7c392514..86c52e8a9 100644
--- a/lib/cpumask.c
+++ b/lib/cpumask.c
@@ -148,6 +148,23 @@ unsigned int cpumask_local_spread(unsigned int i, int node)
 }
 EXPORT_SYMBOL(cpumask_local_spread);
 
+/*
+ * Task distribution within the cpumask feature disabled?
+ */
+static bool cpumask_pick_firstcpu __read_mostly  = 0;
+
+/*
+ * Disable Tasks distribution within the cpumask feature
+ */
+static int __init cpumask_pick_firstcpu_setup(char *str)
+{
+	cpumask_pick_firstcpu = 1;
+	pr_info("cpumask: Tasks distribution within cpumask is disabled.");
+	return 1;
+}
+
+__setup("sched_pick_firstcpu", cpumask_pick_firstcpu_setup);
+
 static DEFINE_PER_CPU(int, distribute_cpu_mask_prev);
 
 /**
@@ -163,6 +180,13 @@ unsigned int cpumask_any_and_distribute(const struct cpumask *src1p,
 {
 	unsigned int next, prev;
 
+	/*
+	 * Don't distribute, if tasks distribution
+	 * within cpumask feature is disabled
+	 */
+	if (cpumask_pick_firstcpu)
+		return cpumask_any_and(src1p, src2p);
+
 	/* NOTE: our first selection will skip 0. */
 	prev = __this_cpu_read(distribute_cpu_mask_prev);
 
-- 
2.23.1

