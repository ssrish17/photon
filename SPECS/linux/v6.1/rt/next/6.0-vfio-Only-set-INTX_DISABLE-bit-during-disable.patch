From 8038ebfe5ca3c10c037d6dd63d53c511cbff8867 Mon Sep 17 00:00:00 2001
From: Bo Gan <ganb@vmware.com>
Date: Thu, 10 Nov 2022 10:17:25 +0000
Subject: [PATCH] vfio: Only set INTX_DISABLE bit during disable

Do not touch other PCI command register bits, such as IO/MEMORY enable
bits, during vfio_pci_core_disable. This avoids decoding getting disabled
and later enabled again in pci_restore_state. For virtualized guests,
enabling/disabling decoding is costly, as the nested pagetable mappings
need updates and get synchronized across all vcpus.

Currently this optimization is effective only with disable_resets=1.

Signed-off-by: Bo Gan <ganb@vmware.com>
[ Srivatsa: Forward-ported to kernel 6.0.y ]
Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
---
 drivers/vfio/pci/vfio_pci_core.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/drivers/vfio/pci/vfio_pci_core.c b/drivers/vfio/pci/vfio_pci_core.c
index 824a8cf4b37e..ceff9f5016b6 100644
--- a/drivers/vfio/pci/vfio_pci_core.c
+++ b/drivers/vfio/pci/vfio_pci_core.c
@@ -460,7 +460,15 @@ void vfio_pci_core_disable(struct vfio_pci_core_device *vdev)
 	 * Disable INTx and MSI, presumably to avoid spurious interrupts
 	 * during reset.  Stolen from pci_reset_function()
 	 */
-	pci_write_config_word(pdev, PCI_COMMAND, PCI_COMMAND_INTX_DISABLE);
+	if (vfio_pci_resets_disabled()) {
+		u16 cmd;
+		pci_read_config_word(pdev, PCI_COMMAND, &cmd);
+		pci_write_config_word(pdev, PCI_COMMAND,
+				      cmd | PCI_COMMAND_INTX_DISABLE);
+	} else {
+		pci_write_config_word(pdev, PCI_COMMAND,
+				      PCI_COMMAND_INTX_DISABLE);
+	}
 
 	/*
 	 * Try to get the locks ourselves to prevent a deadlock. The
-- 
2.25.1

