From 35d48897601962c412b03b3468e11108ff9bfe56 Mon Sep 17 00:00:00 2001
From: Bo Gan <ganb@vmware.com>
Date: Tue, 2 Jun 2020 19:35:47 -0700
Subject: [PATCH 15/25] x86/vmware: Log kmsg dump on panic

In case of panic kmsg will be dumped to vmware.log file

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Bo Gan <ganb@vmware.com>
---
 arch/x86/kernel/cpu/vmware.c | 142 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 142 insertions(+)

diff --git a/arch/x86/kernel/cpu/vmware.c b/arch/x86/kernel/cpu/vmware.c
index 64bc42214..c34d7e533 100644
--- a/arch/x86/kernel/cpu/vmware.c
+++ b/arch/x86/kernel/cpu/vmware.c
@@ -28,6 +28,8 @@
 #include <linux/cpu.h>
 #include <linux/reboot.h>
 #include <linux/static_call.h>
+#include <linux/kmsg_dump.h>
+#include <linux/objtool.h>
 #include <asm/div64.h>
 #include <asm/x86_init.h>
 #include <asm/hypervisor.h>
@@ -45,6 +47,7 @@
 #define VMWARE_CMD_GETHZ         45
 #define VMWARE_CMD_GETVCPU_INFO  68
 #define VMWARE_CMD_LEGACY_X2APIC  3
+#define VMWARE_CMD_MESSAGE       30
 #define VMWARE_CMD_VCPU_RESERVED 31
 #define VMWARE_CMD_STEALCLOCK    91
 
@@ -52,6 +55,8 @@
 #define STEALCLOCK_DISABLED        0
 #define STEALCLOCK_ENABLED         1
 
+#define VMWARE_HB_CMD_MESSAGE      0
+
 #define VMWARE_CMD(cmd, eax, ebx, ecx, edx)				\
 	__asm__(VMWARE_HYPERCALL :					\
 		"=a"(eax), "=c"(ecx), "=d"(edx), "=b"(ebx) :		\
@@ -117,6 +122,13 @@ static unsigned long vmware_get_tsc_khz(void)
 	return vmware_tsc_khz;
 }
 
+static void kmsg_dumper_vmware_log(struct kmsg_dumper *dumper,
+				enum kmsg_dump_reason reason);
+
+static struct kmsg_dumper kmsg_dumper = {
+	.dump = kmsg_dumper_vmware_log
+};
+
 #ifdef CONFIG_PARAVIRT
 static struct cyc2ns_data vmware_cyc2ns __ro_after_init;
 static bool vmw_sched_clock __initdata = true;
@@ -424,6 +436,8 @@ static void __init vmware_platform_setup(void)
 #endif
 
 	vmware_set_capabilities();
+
+	kmsg_dump_register(&kmsg_dumper);
 }
 
 static u8 __init vmware_select_hypercall(void)
@@ -522,3 +536,133 @@ const __initconst struct hypervisor_x86 x86_hyper_vmware = {
 	.runtime.sev_es_hcall_finish	= vmware_sev_es_hcall_finish,
 #endif
 };
+
+#define MESSAGE_STATUS_SUCCESS  (0x01 << 16)
+#define MESSAGE_STATUS_CPT      (0x10 << 16)
+#define MESSAGE_STATUS_HB       (0x80 << 16)
+#define  VMWARE_HB_CMD_MSGST_SUCCESS \
+	(VMWARE_HB_CMD_MESSAGE | MESSAGE_STATUS_SUCCESS)
+#define  VMWARE_HB_CMD_MSGST_CPT \
+	(VMWARE_HB_CMD_MESSAGE | MESSAGE_STATUS_CPT)
+#define  VMWARE_HB_CMD_MSGST_HB \
+	(VMWARE_HB_CMD_MESSAGE | MESSAGE_STATUS_HB)
+
+#define RPCI_PROTOCOL_NUM       0x49435052 /* 'RPCI' */
+#define GUESTMSG_FLAG_COOKIE    0x80000000
+
+#define MESSAGE_TYPE_OPEN	(0 << 16)
+#define MESSAGE_TYPE_SENDSIZE	(1 << 16)
+#define MESSAGE_TYPE_SEND	(2 << 16)
+#define MESSAGE_TYPE_CLOSE	(6 << 16)
+#define  VMWARE_CMD_MSG_OPEN \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_OPEN)
+#define  VMWARE_CMD_MSG_SENDSIZE \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_SENDSIZE)
+#define  VMWARE_CMD_MSG_SEND \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_SEND)
+#define  VMWARE_CMD_MSG_CLOSE \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_CLOSE)
+
+typedef struct {
+	uint32_t id;
+	uint32_t cookieHigh;
+	uint32_t cookieLow;
+} vmw_msg;
+
+static int
+vmware_log_open(vmw_msg *msg)
+{
+	uint32_t result, info, ebx = RPCI_PROTOCOL_NUM | GUESTMSG_FLAG_COOKIE;
+
+	VMWARE_CMD_6(MSG_OPEN, result, ebx,
+		info, msg->id, msg->cookieHigh, msg->cookieLow);
+
+	if ((info & MESSAGE_STATUS_SUCCESS) == 0)
+		return 1;
+
+	msg->id &= 0xffff0000UL;
+	return 0;
+}
+
+static int
+vmware_log_close(vmw_msg *msg)
+{
+	uint32_t result, info, ebx = 0, edx = msg->id;
+
+	VMWARE_CMD_6(MSG_CLOSE, result, ebx, info, edx,
+		msg->cookieHigh, msg->cookieLow);
+
+	if ((info & MESSAGE_STATUS_SUCCESS) == 0)
+		return 1;
+	return 0;
+}
+
+static int
+vmware_log_send(vmw_msg *msg, const char *string)
+{
+	uint32_t result, info;
+	uint32_t len = strlen(string);
+	uint32_t ecx, edx, ebx;
+
+retry:
+	ebx = len;
+	edx = msg->id;
+	VMWARE_CMD_6(MSG_SENDSIZE, result, ebx, info, edx,
+		msg->cookieHigh, msg->cookieLow);
+
+	if (!(info & MESSAGE_STATUS_SUCCESS))
+		return 1;
+
+	edx = msg->id;
+	if (!(sev_status & MSR_AMD64_SEV_ENABLED) && (info & MESSAGE_STATUS_HB)) {
+		ecx = len;
+		VMWARE_HB_OUT(MSGST_SUCCESS, result, info, ecx, edx,
+			string, msg->cookieLow, msg->cookieHigh);
+	} else {
+		do {
+			size_t s = len > sizeof(ebx) ? sizeof(ebx) : len;
+
+			memcpy(&ebx, string, s);
+
+			len -= s;
+			string += s;
+
+			VMWARE_CMD_6(MSG_SEND, result, ebx, info, edx,
+					msg->cookieHigh, msg->cookieLow);
+		} while(len && (info & MESSAGE_STATUS_SUCCESS));
+	}
+
+	if ((info & MESSAGE_STATUS_SUCCESS) == 0) {
+		if (info & MESSAGE_STATUS_CPT)
+			/* A checkpoint occurred. Retry. */
+			goto retry;
+		return 1;
+	}
+	return 0;
+}
+STACK_FRAME_NON_STANDARD(vmware_log_send);
+
+static void kmsg_dumper_vmware_log(struct kmsg_dumper *dumper,
+				enum kmsg_dump_reason reason)
+{
+	vmw_msg msg;
+	static char line[1024];
+	size_t len = 0;
+	bool fail = false;
+	struct kmsg_dump_iter iter;
+
+	line[0] = 'l';
+	line[1] = 'o';
+	line[2] = 'g';
+	line[3] = ' ';
+
+	kmsg_dump_rewind(&iter);
+	while (!fail && kmsg_dump_get_line(&iter, true,
+		line + 4, sizeof(line) - 4, &len)) {
+		line[len + 4] = '\0';
+		if (vmware_log_open(&msg))
+			return;
+		fail = vmware_log_send(&msg, line);
+		vmware_log_close(&msg);
+	}
+}
-- 
2.7.4

