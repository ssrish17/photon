From 4217ea9f4c392beed90737da46ca90ba059e2328 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Fri, 8 Sep 2023 06:09:50 +0000
Subject: [PATCH] changes to build with jitterentropy v3.4.1

Signed-off-by: Keerthana K <keerthanak@vmware.com>
---
 crypto/Makefile              |  6 +++--
 crypto/jitterentropy-kcapi.c | 44 ++++++++++--------------------------
 2 files changed, 16 insertions(+), 34 deletions(-)

diff --git a/crypto/Makefile b/crypto/Makefile
index 2b425a563..e894f796c 100644
--- a/crypto/Makefile
+++ b/crypto/Makefile
@@ -6,6 +6,10 @@
 obj-$(CONFIG_CRYPTO) += crypto.o
 crypto-y := api.o cipher.o compress.o
 
+obj-$(CONFIG_CRYPTO_JITTERENTROPY) += jitterentropy_rng.o jitterentropy-3.4.1/ jitterentropy-3.4.1/jitterentropy_canister_wrapper.o jitterentropy-3.4.1/jitterentropy_canister_wrapper_asm.o
+
+jitterentropy_rng-y := jitterentropy-kcapi.o
+
 obj-$(CONFIG_CRYPTO_ENGINE) += crypto_engine.o
 obj-$(CONFIG_CRYPTO_FIPS) += fips.o
 
@@ -149,11 +153,9 @@ obj-$(CONFIG_CRYPTO_842) += 842.o
 obj-$(CONFIG_CRYPTO_RNG2) += rng.o
 obj-$(CONFIG_CRYPTO_ANSI_CPRNG) += ansi_cprng.o
 obj-$(CONFIG_CRYPTO_DRBG) += drbg.o
-obj-$(CONFIG_CRYPTO_JITTERENTROPY) += jitterentropy_rng.o
 CFLAGS_jitterentropy.o = -O0
 KASAN_SANITIZE_jitterentropy.o = n
 UBSAN_SANITIZE_jitterentropy.o = n
-jitterentropy_rng-y := jitterentropy.o jitterentropy-kcapi.o
 obj-$(CONFIG_CRYPTO_TEST) += tcrypt.o
 obj-$(CONFIG_CRYPTO_GHASH) += ghash-generic.o
 obj-$(CONFIG_CRYPTO_POLYVAL) += polyval-generic.o
diff --git a/crypto/jitterentropy-kcapi.c b/crypto/jitterentropy-kcapi.c
index b892685e1..8b98d2e29 100644
--- a/crypto/jitterentropy-kcapi.c
+++ b/crypto/jitterentropy-kcapi.c
@@ -2,7 +2,7 @@
  * Non-physical true random number generator based on timing jitter --
  * Linux Kernel Crypto API specific code
  *
- * Copyright Stephan Mueller <smueller@chronox.de>, 2015
+ * Copyright Stephan Mueller <smueller@chronox.de>, 2023
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
@@ -44,7 +44,8 @@
 #include <linux/time.h>
 #include <crypto/internal/rng.h>
 
-#include "jitterentropy.h"
+#include "jitterentropy-3.4.1/jitterentropy.h"
+#include "jitterentropy-3.4.1/jitterentropy-timer.h"
 
 /***************************************************************************
  * Helper function
@@ -55,8 +56,9 @@ void *jent_zalloc(unsigned int len)
 	return kzalloc(len, GFP_KERNEL);
 }
 
-void jent_zfree(void *ptr)
+void jent_zfree(void *ptr, unsigned int len)
 {
+	memzero_explicit(ptr, len);
 	kfree_sensitive(ptr);
 }
 
@@ -65,31 +67,6 @@ void jent_memcpy(void *dest, const void *src, unsigned int n)
 	memcpy(dest, src, n);
 }
 
-/*
- * Obtain a high-resolution time stamp value. The time stamp is used to measure
- * the execution time of a given code path and its variations. Hence, the time
- * stamp must have a sufficiently high resolution.
- *
- * Note, if the function returns zero because a given architecture does not
- * implement a high-resolution time stamp, the RNG code's runtime test
- * will detect it and will not produce output.
- */
-void jent_get_nstime(__u64 *out)
-{
-	__u64 tmp = 0;
-
-	tmp = random_get_entropy();
-
-	/*
-	 * If random_get_entropy does not return a value, i.e. it is not
-	 * implemented for a given architecture, use a clock source.
-	 * hoping that there are timers we can work with.
-	 */
-	if (tmp == 0)
-		tmp = ktime_get_ns();
-
-	*out = tmp;
-}
 
 /***************************************************************************
  * Kernel crypto API interface
@@ -152,14 +129,16 @@ static int jent_kcapi_random(struct crypto_rng *tfm,
 		/* Handle intermittent health test error */
 		pr_warn_ratelimited("Reset Jitter RNG due to intermittent health test failure\n");
 		ret = -EAGAIN;
-	} else if (ret == -1) {
-		/* Handle other errors */
-		ret = -EINVAL;
+	} else {
+		if (ret < 0) {
+			/* Handle other errors */
+			ret = -EINVAL;
+		}
 	}
 
 	spin_unlock(&rng->jent_lock);
 
-	return ret;
+	return ret > 0 ? 0 : ret;
 }
 
 static int jent_kcapi_reset(struct crypto_rng *tfm,
@@ -211,5 +190,6 @@ module_exit(jent_mod_exit);
 
 MODULE_LICENSE("Dual BSD/GPL");
 MODULE_AUTHOR("Stephan Mueller <smueller@chronox.de>");
+MODULE_AUTHOR("Srinidhi Rao <srinidhir@vmware.com>");
 MODULE_DESCRIPTION("Non-physical True Random Number Generator based on CPU Jitter");
 MODULE_ALIAS_CRYPTO("jitterentropy_rng");
-- 
2.23.3

