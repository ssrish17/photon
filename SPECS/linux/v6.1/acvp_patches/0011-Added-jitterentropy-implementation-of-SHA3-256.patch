From fe09ae9b7169583f3ace090bff0237c2aa5880c7 Mon Sep 17 00:00:00 2001
From: Srish Srinivasan <ssrish@vmware.com>
Date: Thu, 28 Sep 2023 07:52:42 +0000
Subject: [PATCH] Added jitterentropy implementation of SHA3-256

---
 crypto/jitterentropy-kcapi.c | 45 ++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/crypto/jitterentropy-kcapi.c b/crypto/jitterentropy-kcapi.c
index 8b98d2e29..891b92d1d 100644
--- a/crypto/jitterentropy-kcapi.c
+++ b/crypto/jitterentropy-kcapi.c
@@ -43,9 +43,11 @@
 #include <linux/slab.h>
 #include <linux/time.h>
 #include <crypto/internal/rng.h>
+#include <crypto/internal/hash.h>
 
 #include "jitterentropy-3.4.1/jitterentropy.h"
 #include "jitterentropy-3.4.1/jitterentropy-timer.h"
+#include "jitterentropy-3.4.1/jitterentropy-sha3.h"
 
 /***************************************************************************
  * Helper function
@@ -147,6 +149,30 @@ static int jent_kcapi_reset(struct crypto_rng *tfm,
 	return 0;
 }
 
+int sha3_256_init_wrapper(struct shash_desc *desc)
+{
+	struct sha_ctx *sctx =  shash_desc_ctx(desc);
+	sha3_256_init(sctx);
+	return 0;
+}
+EXPORT_SYMBOL(sha3_256_init_wrapper);
+
+int sha3_update_wrapper(struct shash_desc *desc, const u8 *data, unsigned int len)
+{
+	struct sha_ctx *sctx = shash_desc_ctx(desc);
+	sha3_update(sctx, data, len);
+	return 0;
+}
+EXPORT_SYMBOL(sha3_update_wrapper);
+
+int sha3_final_wrapper(struct shash_desc *desc, u8 *out)
+{
+	struct sha_ctx *sctx = shash_desc_ctx(desc);
+	sha3_final(sctx, out);
+	return 0;
+}
+EXPORT_SYMBOL(sha3_final_wrapper);
+
 static struct rng_alg jent_alg = {
 	.generate		= jent_kcapi_random,
 	.seed			= jent_kcapi_reset,
@@ -163,6 +189,18 @@ static struct rng_alg jent_alg = {
 	}
 };
 
+static struct shash_alg algs[] = { {
+	.digestsize		= SHA3_256_SIZE_DIGEST,
+	.init			= sha3_256_init_wrapper,
+	.update			= sha3_update_wrapper,
+	.final			= sha3_final_wrapper,
+	.descsize		= sizeof(struct sha_ctx),
+	.base.cra_name		= "jitter-sha3-256",
+	.base.cra_driver_name	= "jitter-sha3-256-generic",
+	.base.cra_blocksize	= SHA3_256_SIZE_BLOCK,
+	.base.cra_module	= THIS_MODULE,
+} };
+
 static int __init jent_mod_init(void)
 {
 	int ret = 0;
@@ -176,12 +214,19 @@ static int __init jent_mod_init(void)
 		pr_info("jitterentropy: Initialization failed with host not compliant with requirements: %d\n", ret);
 		return -EFAULT;
 	}
+	ret = crypto_register_shashes(algs, ARRAY_SIZE(algs));
+	if (ret) {
+		pr_info("jitterentropy: jitter-sha3-256 registration failed with err: %d\n", ret);
+		return -EFAULT;
+        }
+
 	return crypto_register_rng(&jent_alg);
 }
 
 static void __exit jent_mod_exit(void)
 {
 	crypto_unregister_rng(&jent_alg);
+	crypto_unregister_shashes(algs, ARRAY_SIZE(algs));
 }
 
 /* Must be initialized before tcrypt */
-- 
2.39.0
