From f49699a5bc8148e72fb0d831448d0f9b345e1443 Mon Sep 17 00:00:00 2001
From: Amod Mishra <mamod@vmware.com>
Date: Mon, 7 Sep 2020 12:25:37 -0700
Subject: [PATCH 07/10] Don't use writeback fid for cache when enabled for VDFS

Writeback fid is used for data caching. It is utilized to write dirty pages back to the server.Writeback fid is associated with an inode. An inode may still be cached even in case file is closed,the writeback_fid associated to the inode in cache is still opened, and the file descriptor on host of the writeback_fid is also kept opened.This can cuase too many files opened at the host.VDFS does not use caching for data and to avoid above issue, usage of writeback fid for VDFS has been prohibited.
---
 fs/9p/vfs_file.c       | 2 ++
 fs/9p/vfs_inode.c      | 1 +
 fs/9p/vfs_inode_dotl.c | 1 +
 3 files changed, 4 insertions(+)

diff --git a/fs/9p/vfs_file.c b/fs/9p/vfs_file.c
index 850003138..73d8c264d 100644
--- a/fs/9p/vfs_file.c
+++ b/fs/9p/vfs_file.c
@@ -75,6 +75,7 @@ int v9fs_file_open(struct inode *inode, struct file *file)
 
 	mutex_lock(&v9inode->v_mutex);
 	if ((v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE) &&
+            !v9ses->metaonly &&
 	    !v9inode->writeback_fid &&
 	    ((file->f_flags & O_ACCMODE) != O_RDONLY)) {
 		/*
@@ -531,6 +532,7 @@ v9fs_mmap_file_mmap(struct file *filp, struct vm_area_struct *vma)
 	v9inode = V9FS_I(inode);
 	mutex_lock(&v9inode->v_mutex);
 	if (!v9inode->writeback_fid &&
+	    !v9fs_inode2v9ses(inode)->metaonly &&
 	    (vma->vm_flags & VM_SHARED) &&
 	    (vma->vm_flags & VM_WRITE)) {
 		/*
diff --git a/fs/9p/vfs_inode.c b/fs/9p/vfs_inode.c
index d3e88e901..fe38e1141 100644
--- a/fs/9p/vfs_inode.c
+++ b/fs/9p/vfs_inode.c
@@ -845,6 +845,7 @@ v9fs_vfs_atomic_open(struct inode *dir, struct dentry *dentry,
 	v9inode = V9FS_I(inode);
 	mutex_lock(&v9inode->v_mutex);
 	if ((v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE) &&
+	    !v9ses->metaonly &&
 	    !v9inode->writeback_fid &&
 	    ((flags & O_ACCMODE) != O_RDONLY)) {
 		/*
diff --git a/fs/9p/vfs_inode_dotl.c b/fs/9p/vfs_inode_dotl.c
index 386d264ad..75896cc0a 100644
--- a/fs/9p/vfs_inode_dotl.c
+++ b/fs/9p/vfs_inode_dotl.c
@@ -318,6 +318,7 @@ v9fs_vfs_atomic_open_dotl(struct inode *dir, struct dentry *dentry,
 	v9inode = V9FS_I(inode);
 	mutex_lock(&v9inode->v_mutex);
 	if ((v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE) &&
+	    !v9ses->metaonly &&
 	    !v9inode->writeback_fid &&
 	    ((flags & O_ACCMODE) != O_RDONLY)) {
 		/*
-- 
2.39.0

